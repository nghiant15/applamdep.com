{"version":3,"sources":["views/base/tables/TableUser.js","views/Common/TextFieldGroup.js","redux/data/actions.js"],"names":["headers","Headers","auth","localStorage","getItem","append","Users","props","getUserSale","sale_id","a","company_id","state","setState","isLoading","id","JSON","parse","bodyCustomer","condition","Company_Id","Sale_Id","axios","baseURL","Constants","BASE_URL","url","LIST_CUSTOMER","method","data","token","res","pagination","dataApi","active","map","val","Status","totalActive","getUserSale_ByMonth","month","GET_USER_SALE_BY_MONTH","arrTemp","arrCount_User_Per","getArrTemp","i","some","item","Phone","count","countType","GET_COEFFICIENT_PER_SALE","idSale","resCal","coefficient","calculator","push","length","getUserSale_ByMonth_forSale","getAllData","resAll","arrCount_All_User","CALCULATOR_ALL_USER_OF_SALE","resCal_all","pagination_all","getData","role","bodyUser","GET_SHOP","GET_SALE","openDelete","modalDelete","delete","key","activePage","page","itemsCount","limit","modalCom","viewingUser","communities","updated","action","Email","Address","Name","Gender","Role_Id","UserName","Password","Code","dataCompany","currentCompany","dataSale","currentSale","dataRole","currentRole","arrPagination","indexPage","arrPagination_All","indexPage_All","see_detail","arrMonth","arrMonthWithDefault","hidden","nameSale","dataAll","hidden_all","isSale","Authorization","arrAllUser","this","GET_SEEDER","console","log","onSaveSeed","history","j","temparray","arrTotal","slice","arr","phone","filter","id_sale","onSaveID","d","toLocaleUpperCase","includes","getCompanyData","getSaleData","getRoleData","alert","body","ADD_USER","is_success","message","UPDATE_USER","DELETE_USER","fetchData","fetch","global","then","users","json","result","total","catch","LIST_COMPANY","resCompany","undefined","LIST_COMPANY_WITH_ID","currentC","LIST_SALE","resSale","LIST_SALE_WITH_ID","LIST_ROLE","resRole","LIST_ROLE_WITH_ID","e","target","name","value","tableUserSale_forSale","getDataUser_ForSale","className","type","color","height","width","class","style","styles","tags","searchInput","onChange","searchKey","placeholder","outline","floatRight","size","onClick","toggleModal","backgroundColor","check","custom","selected","colSpan","Date","Create_Date","toLocaleDateString","toLocaleTimeString","getSeeder","mgl5","openUpdate","tableUserSale","_id","float","marginRight","padding","row","margin","rows","datasets","label","labels","options","tooltips","enabled","isOpen","field","readOnly","flexLabel","htmlFor","flexOption","addUser","updateUser","disabled","toggle","Component","wa10","sale_times","textAlign","textDecoration","marginTop","spinner","center","tbody","overflowY","wh12","ws12","wh15","w5","w5_10","success","danger","marginLeft","display","userActive","userPending","nagemonNameCol","image","borderRadius","connect","getData_AllAPI","TextFieldGroup","error","checkUserExists","classnames","onBlur","defaultProps","SAVE_ID_SALE","payload","seed","SAVE_SEED"],"mappings":"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","file":"static/js/81.2831c9b0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Button, Input,\n  ModalHeader, ModalBody, ModalFooter, Modal,\n} from 'reactstrap';\n\nimport {\n  CSelect,\n  CCardGroup,\n  CCard,\n  CCardBody,\n} from '@coreui/react'\n\n\nimport {\n  CChartBar,\n} from '@coreui/react-chartjs'\n\nimport { connect } from 'react-redux';\nimport {\n  onSaveID,\n  onSaveSeed\n} from '../../../redux/data/actions'\nimport 'moment-timezone';\nimport Constants from \"./../../../contants/contants\";\nimport TextFieldGroup from \"../../../views/Common/TextFieldGroup\";\nimport axios from 'axios'\nimport ReactLoading from 'react-loading';\n\nlet headers = new Headers();\nconst auth = localStorage.getItem('auth');\nheaders.append('Authorization', 'Bearer ' + auth);\nheaders.append('Content-Type', 'application/json');\n\nclass Users extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      key: '',\n      activePage: 1,\n      page: 1,\n      itemsCount: 0,\n      limit: 20,\n      totalActive: 0,\n      modalCom: false,\n      viewingUser: {},\n      communities: [],\n      updated: '',\n      dataApi: [],\n      action: 'new',\n      Email: '',\n      Address: '',\n      Name: '',\n      Phone: '',\n      Gender: 'Nam',\n      Company_Id: '',\n      Role_Id: '',\n      UserName: '',\n      Password: '',\n      Sale_Id: '',\n      Code: '',\n      Status: '',\n      modalDelete: false,\n      delete: null,\n      dataCompany: [],\n      currentCompany: '',\n      dataSale: [],\n      currentSale: '',\n      dataRole: [],\n      currentRole: '',\n      arrPagination: [],\n      indexPage: 0,\n      arrPagination_All: [],\n      indexPage_All: 0,\n      role: localStorage.getItem('role'),\n      company_id: localStorage.getItem('user'),\n      see_detail: true,\n      month: 0,\n      arrTemp: [],\n      arrMonth: [\n        \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\",\n      ],\n      arrMonthWithDefault: [\n        \"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\",\n      ],\n      isLoading: true,\n      hidden: false,\n      nameSale: '',\n      dataAll: [],\n      hidden_all: false,\n      isSale: false,\n      token: { Authorization: `Bearer ${localStorage.getItem('token')}` },\n      arrAllUser: []\n    };\n  }\n  async componentDidMount() {\n    this.getData();\n  }\n\n  async getSeeder(){\n    const res = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.GET_SEEDER,\n      method: 'POST',\n      data: {\n        \"email\": \"ktpm489@gmail.com\"\n      }\n    })\n    console.log(res)\n    this.props.onSaveSeed(res.data.data);\n    this.props.history.push('/history')\n  }\n\n  pagination(dataApi) {\n    var i, j, temparray, chunk = 5;\n    var arrTotal = [];\n    for (i = 0, j = dataApi.length; i < j; i += chunk) {\n      temparray = dataApi.slice(i, i + chunk);\n      arrTotal.push(temparray);\n    }\n    if (arrTotal.length == 0) {\n      this.setState({\n        hidden: false\n      })\n    } else {\n      this.setState({\n        hidden: true\n      })\n    }\n    this.setState({ arrPagination: arrTotal, data: arrTotal[this.state.indexPage] });\n  }\n\n  pagination_all(dataApi) {\n    var i, j, temparray, chunk = 5;\n    let arrTotal = [];\n    for (i = 0, j = dataApi.length; i < j; i += chunk) {\n      temparray = dataApi.slice(i, i + chunk);\n      arrTotal.push(temparray);\n    }\n    if (arrTotal.length == 0) {\n      this.setState({\n        hidden_all: false\n      })\n    } else {\n      this.setState({\n        hidden_all: true\n      })\n    }\n    this.setState({ arrPagination_All: arrTotal, dataAll: arrTotal[this.state.indexPage_All] });\n  }\n\n  getUserSale = async (sale_id) => {\n    const { company_id } = this.state;\n    this.setState({ isLoading: true });\n    var id = JSON.parse(company_id);\n\n    var bodyCustomer = {\n      condition: {\n        Company_Id: id.company_id,\n        Sale_Id: sale_id\n      }\n    }\n\n    var res = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.LIST_CUSTOMER,\n      method: 'POST',\n      data: bodyCustomer,\n      headers: this.state.token\n    })\n\n    this.pagination(res.data.data);\n    this.setState({ dataApi: res.data.data });\n\n    let active = 0\n\n    res.data.data.map(val => {\n      if (val.Status == \"Actived\") {\n        active = active + 1\n      }\n    })\n\n    this.setState({ isLoading: false, totalActive: active });\n  }\n\n  countType(arr, phone) {\n    const count = arr.filter(data => data.Phone == phone);\n    return count.length;\n  }\n\n  getUserSale_ByMonth = async (sale_id, month) => {\n    const { company_id } = this.state;\n    var id = JSON.parse(company_id);\n\n    var bodyCustomer = {\n      \"month\": month,\n      \"company_id\": id.company_id,\n      \"sale_id\": sale_id\n    }\n\n    const res = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.GET_USER_SALE_BY_MONTH,\n      method: 'POST',\n      data: bodyCustomer\n    })\n\n    this.setState({ dataApi: res.data.data, arrTemp: res.data.data });\n    let arrCount_User_Per = [];\n    var getArrTemp = this.state.arrTemp;\n    for (let i = 0; i < getArrTemp.length; i++) {\n      //check if exits in arr\n      if (!arrCount_User_Per.some(item => getArrTemp[i].Phone == item.Phone)) {\n        getArrTemp[i].count = this.countType(getArrTemp, getArrTemp[i].Phone);\n        const resCal = await axios({\n          baseURL: Constants.BASE_URL,\n          url: Constants.GET_COEFFICIENT_PER_SALE,\n          method: 'POST',\n          data: {\n            \"month\": month,\n            \"company_id\": id.company_id,\n            \"phone\": getArrTemp[i].Phone,\n            \"sale_id\": this.props.data.idSale\n          }\n        });\n        getArrTemp[i].coefficient = resCal.data.data.calculator;\n        arrCount_User_Per.push(getArrTemp[i])\n      }\n    }\n\n    this.pagination(arrCount_User_Per);\n    this.setState({ isLoading: false });\n  }\n\n  getUserSale_ByMonth_forSale = async (sale_id, month) => {\n    const { company_id } = this.state;\n    this.setState({ isLoading: true });\n    var id = JSON.parse(company_id);\n\n    var bodyCustomer = {\n      \"month\": month,\n      \"company_id\": id.company_id,\n      \"sale_id\": sale_id\n    }\n\n    const res = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.GET_USER_SALE_BY_MONTH,\n      method: 'POST',\n      data: bodyCustomer\n    })\n\n    this.setState({ dataApi: res.data.data, arrTemp: res.data.data });\n    let arrCount_User_Per = [];\n    var getArrTemp = this.state.arrTemp;\n    for (let i = 0; i < getArrTemp.length; i++) {\n      //check if exits in arr\n      if (!arrCount_User_Per.some(item => getArrTemp[i].Phone == item.Phone)) {\n        getArrTemp[i].count = this.countType(getArrTemp, getArrTemp[i].Phone);\n        const resCal = await axios({\n          baseURL: Constants.BASE_URL,\n          url: Constants.GET_COEFFICIENT_PER_SALE,\n          method: 'POST',\n          data: {\n            \"month\": month,\n            \"company_id\": id.company_id,\n            \"phone\": getArrTemp[i].Phone,\n            \"sale_id\": sale_id\n          }\n        });\n        getArrTemp[i].coefficient = resCal.data.data.calculator;\n        arrCount_User_Per.push(getArrTemp[i])\n      }\n    }\n    this.pagination(arrCount_User_Per);\n    this.setState({ isLoading: false });\n  }\n\n  getAllData = async () => {\n    const { company_id } = this.state;\n    this.setState({ isLoading: true });\n    var id = JSON.parse(company_id);\n\n    var resAll = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.LIST_CUSTOMER,\n      method: 'POST',\n      data: {\n        condition: {\n          Company_Id: id.company_id,\n          Sale_Id: this.props.data.idSale\n        }\n      },\n      headers: this.state.token\n    })\n\n    this.setState({ dataApi: resAll.data.data });\n\n    let arrCount_All_User = [];\n\n    for (let i = 0; i < resAll.data.data.length; i++) {\n      //check if exits in arr\n      if (!arrCount_All_User.some(item => resAll.data.data[i].Phone == item.Phone)) {\n        resAll.data.data[i].count = this.countType(resAll.data.data, resAll.data.data[i].Phone);\n\n        var resCal_all = await axios({\n          baseURL: Constants.BASE_URL,\n          url: Constants.CALCULATOR_ALL_USER_OF_SALE,\n          method: 'POST',\n          data: {\n            \"company_id\": id.company_id,\n            \"phone\": resAll.data.data[i].Phone,\n            \"sale_id\": this.props.data.idSale\n          }\n        });\n        resAll.data.data[i].coefficient = resCal_all.data.data.calculator;\n        arrCount_All_User.push(resAll.data.data[i])\n      }\n    }\n\n    this.pagination_all(arrCount_All_User);\n    this.setState({ isLoading: false });\n  }\n\n  getData = async () => {\n    const { company_id, role } = this.state;\n    this.setState({ isLoading: true });\n    var id = JSON.parse(company_id);\n\n    var bodyUser = {\n      company_id: id.company_id\n    }\n\n    var bodyCustomer = {\n      condition: {\n        Company_Id: id.company_id,\n        Sale_Id: id.sale_id\n      }\n    }\n    if (role == 'ADMIN' || role == 'ADMINSALE') {\n      var res = await axios({\n        baseURL: Constants.BASE_URL,\n        url: Constants.GET_SHOP,\n        method: 'POST',\n        headers: this.state.token\n      });\n\n    } else if (role == 'SHOPMANAGER') {\n      var res = await axios({\n        baseURL: Constants.BASE_URL,\n        url: Constants.GET_SALE,\n        method: 'POST',\n        data: bodyUser,\n        headers: this.state.token\n      });\n\n    } else if (role == 'SALES') {\n      var res = await axios({\n        baseURL: Constants.BASE_URL,\n        url: Constants.LIST_CUSTOMER,\n        method: 'POST',\n        data: bodyCustomer,\n        headers: this.state.token\n      })\n    }\n\n    this.pagination(res.data.data);\n    this.setState({ dataApi: res.data.data });\n\n    let active = 0\n\n    res.data.data.map(val => {\n      if (val.Status == \"Actived\") {\n        active = active + 1\n      }\n    })\n\n    this.setState({ isLoading: false, totalActive: active });\n  }\n\n  async tableUserSale(id_sale, nameSale) {\n\n    const { company_id, arrMonth } = this.state;\n    var id = JSON.parse(company_id);\n\n    await this.getUserSale_ByMonth(id_sale, \"01\");\n    this.props.onSaveID(id_sale)\n    this.getAllData();\n    let arrTemp = [];\n\n    for (let i = 0; i < arrMonth.length; i++) {\n      const res = await axios({\n        baseURL: Constants.BASE_URL,\n        url: Constants.GET_USER_SALE_BY_MONTH,\n        method: 'POST',\n        data: {\n          \"month\": arrMonth[i],\n          \"company_id\": id.company_id,\n          \"sale_id\": this.props.data.idSale\n        }\n      })\n\n      arrTemp.push(res.data.data.length);\n    }\n\n    this.setState({ see_detail: false, nameSale: nameSale, arrAllUser: arrTemp })\n\n\n  }\n\n  async tableUserSale_forSale(month) {\n    const { company_id } = this.state;\n    var id = JSON.parse(company_id);\n    await this.getUserSale_ByMonth_forSale(id.sale_id, month);\n  }\n\n  searchKey(key) {\n    const { indexPage } = this.state;\n    this.setState({ key: key })\n\n    if (key != '') {\n      let d = []\n      this.state.dataApi.map(val => {\n        if (val.Phone.toLocaleUpperCase().includes(key.toLocaleUpperCase()) || val.Email.toLocaleUpperCase().includes(key.toLocaleUpperCase())) {\n          d.push(val)\n        }\n      })\n      let active = 0\n\n      d.map(val => {\n        if (val.Status == \"Actived\") {\n          active = active + 1\n        }\n      })\n\n      this.setState({ data: d, totalActive: active })\n    } else {\n      let active = 0\n\n      this.state.dataApi.map(val => {\n        if (val.Status == \"Actived\") {\n          active = active + 1\n        }\n      })\n\n      this.setState({ data: this.state.arrPagination[indexPage], totalActive: active })\n    }\n  }\n\n  async toggleModal(key) {\n    await this.getCompanyData()\n    await this.getSaleData()\n    await this.getRoleData()\n    if (key == 'new') {\n      this.setState({\n        modalCom: !this.state.modalCom,\n        action: key,\n        Email: '',\n        Name: '',\n        Phone: '',\n        Gender: 'Nam',\n        Company_Id: '',\n        Role_Id: '',\n        UserName: '',\n        Password: '',\n        Sale_Id: '',\n        Code: ''\n      })\n    }\n  }\n\n  onChange(key, val) {\n    this.setState({ [key]: val })\n  }\n\n  async addUser() {\n    const { Email, Name, Phone, UserName, Code, Password, Gender, Role_Id, Company_Id, Sale_Id, Address } = this.state\n\n    if (Email == null || Email == ''\n      || Name == null || Name == ''\n      || Phone == null || Phone == ''\n      || UserName == null || UserName == ''\n      || Role_Id == null || Role_Id == ''\n      || Password == null || Password == '') {\n      alert(\"Vui lòng nhập đầy đủ trường !!!\");\n      return\n    }\n\n    const body = {\n      Email: Email,\n      Address: Address,\n      Name: Name,\n      Phone: Phone,\n      Gender: Gender,\n      Company_Id: Company_Id,\n      Role_Id: Role_Id,\n      UserName: UserName,\n      Password: Password,\n      Sale_Id: Sale_Id,\n      Code: Code\n    }\n\n    this.setState({ isLoading: true });\n    const res = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.ADD_USER,\n      method: 'POST',\n      data: body\n    });\n\n    if (res.data.is_success == true) {\n      this.getData();\n      this.setState({ modalCom: !this.state.modalCom })\n    } else {\n      alert(res.data.message);\n      this.setState({ isLoading: false });\n    }\n  }\n\n  async openUpdate(item) {\n    await this.getCompanyData(item.Company_Id)\n    await this.getSaleData(item.Sale_Id)\n    await this.getRoleData(item.Role_Id)\n\n    this.setState({\n      modalCom: !this.state.modalCom,\n      action: \"update\",\n      Email: item.Email,\n      Address: item.Address,\n      Name: item.Name,\n      Phone: item.Phone,\n      Gender: item.Gender,\n      Company_Id: item.Company_Id,\n      Role_Id: item.Role_Id,\n      UserName: item.UserName,\n      Password: item.Password,\n      Sale_Id: item.Sale_Id,\n      Code: item.Code,\n      id: item['_id'],\n      Status: item.Status\n    })\n  }\n\n  async updateUser() {\n    const { Email, Name, Phone, UserName, Code, Password, Gender, Role_Id,\n      Company_Id, Sale_Id, Status, Address } = this.state\n\n    if (Email == null || Email == ''\n      || Name == null || Name == ''\n      || Phone == null || Phone == ''\n      || UserName == null || UserName == ''\n      || Password == null || Password == '') {\n      alert(\"Vui lòng nhập đầy đủ trường !!!\");\n      return\n    }\n\n    const body = {\n      Email: Email,\n      Address: Address,\n      Name: Name,\n      Phone: Phone,\n      Gender: Gender,\n      Company_Id: Company_Id,\n      Role_Id: Role_Id,\n      UserName: UserName,\n      Password: Password,\n      Sale_Id: Sale_Id,\n      Code: Code,\n      id: this.state.id,\n      Status: Status\n    }\n\n    this.setState({ isLoading: true });\n    const res = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.UPDATE_USER,\n      method: 'POST',\n      data: body\n    });\n\n    if (res.data.is_success == true) {\n      this.getData();\n      this.setState({ modalCom: !this.state.modalCom })\n    } else {\n      alert(res.data.message);\n      this.setState({ isLoading: false });\n    }\n  }\n\n  openDelete = (item) => {\n    this.setState({\n      modalDelete: !this.state.modalDelete,\n      delete: item\n    })\n  }\n\n  async delete() {\n    this.setState({ isLoading: true });\n    const res = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.DELETE_USER,\n      method: 'DELETE',\n      data: {\n        \"id\": this.state.delete['_id']\n      }\n    });\n\n    if (res.data.is_success == true) {\n      this.getData();\n      this.setState({ modalDelete: !this.state.modalDelete, delete: null })\n    } else {\n      alert(res.data.message);\n      this.setState({ isLoading: false });\n    }\n\n  }\n\n  getUsers(page = 1) {\n    const limit = this.state.limit;\n    const key = this.state.key || '';\n    const fetchData = {\n      method: 'GET',\n      headers: headers\n    };\n    fetch(global.BASE_URL + '/admin/users?key=' + key + '&page=' + page + '&limit=' + limit, fetchData).then(users => {\n      users.json().then(result => {\n        this.setState({\n          data: result.data,\n          itemsCount: result.total,\n          activePage: page,\n          totalActive: result.totalActive,\n          updated: '',\n        });\n      })\n    }).catch(console.log);\n  }\n\n  async getCompanyData(id) {\n    const resCompany = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.LIST_COMPANY,\n      method: 'POST',\n    });\n\n    if (id != '' || id != undefined) {\n      const currentC = await axios({\n        baseURL: Constants.BASE_URL,\n        url: Constants.LIST_COMPANY_WITH_ID + id,\n        method: 'POST',\n      });\n      if (currentC.data.data != null || currentC.data.data != undefined) {\n        this.setState({ currentCompany: currentC.data.data.Name });\n      }\n    }\n    this.setState({ dataCompany: resCompany.data.data });\n  }\n\n  async getSaleData(id) {\n    const resSale = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.LIST_SALE,\n      method: 'GET',\n    });\n\n    if (id != '' || id != undefined) {\n      const currentSale = await axios({\n        baseURL: Constants.BASE_URL,\n        url: Constants.LIST_SALE_WITH_ID + id,\n        method: 'GET',\n      });\n      if (currentSale.data.data != null || currentSale.data.data != undefined) {\n        this.setState({ currentSale: currentSale.data.data.Name });\n      }\n    }\n    this.setState({ dataSale: resSale.data.data });\n  }\n\n  async getRoleData(id) {\n    const resRole = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.LIST_ROLE,\n      method: 'GET',\n      headers: this.state.token\n    });\n\n    if (id != '' || id != undefined) {\n      const currentRole = await axios({\n        baseURL: Constants.BASE_URL,\n        url: Constants.LIST_ROLE_WITH_ID + id,\n        method: 'GET',\n        headers: this.state.token\n      });\n      if (currentRole.data.data != null || currentRole.data.data != undefined) {\n        this.setState({ currentRole: currentRole.data.data.Name });\n      }\n    }\n    this.setState({ dataRole: resRole.data.data });\n  }\n\n  inputChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  async getDataUser_ForSale(month) {\n    const { role } = this.state;\n    if (role == 'SALES') {\n      this.setState({ isSale: true, month: month })\n      await this.tableUserSale_forSale(month);\n    }\n  }\n\n  async check(e) {\n    if (e.target.value == \"00\") {\n      this.getData();\n      this.setState({ isSale: false })\n    } else {\n      await this.getDataUser_ForSale(e.target.value);\n      this.setState({ month: e.target.value })\n    }\n  }\n\n  render() {\n    const { data, key, dataCompany, role, hidden, dataAll, arrPagination_All, indexPage_All,\n      currentCompany, action, dataRole, currentRole, arrPagination, indexPage,\n      hidden_all, isSale } = this.state;\n\n    if (!this.state.isLoading) {\n      return (\n\n        <div>\n\n          <Card hidden={!this.state.see_detail}>\n            <CardHeader>\n              <div class=\"container\">\n                <div class=\"row\">\n                  <div class=\"col\">\n                    <i className=\"fa fa-align-justify\"> {\n                      role == 'ADMIN' ? \"SHOP LIST\" : role == 'SHOPMANAGER' ? 'SALE LIST' : 'USER LIST'\n                    } ( Page: {this.state.indexPage + 1} )</i>\n                  </div>\n                  <div class=\"col\">\n                    <div style={styles.tags}>\n                      {\n                        role == 'SALES' ? \"\" :\n                          <div>\n                            <Input style={styles.searchInput} onChange={(e) => this.searchKey(e.target.value)} name=\"key\" value={key} placeholder=\"Search\" />\n                            <Button outline color=\"primary\" style={styles.floatRight} size=\"sm\" onClick={async e => await this.toggleModal(\"new\")}>Add</Button>\n                          </div>\n                      }\n                    </div>\n                  </div>\n                  <div class=\"col\">\n                    {\n                      role == 'SALES' ? <div>\n                        <div>Choose Month</div>\n                        <CSelect style={{ width: '100%', backgroundColor: '#ffff99' }} onChange={async e => { await this.check(e) }} custom size=\"sm\" name=\"selectSm\" id=\"SelectLm\">\n                          {\n                            this.state.arrMonthWithDefault.map((item, i) => {\n                              if (item == \"00\") {\n                                return (\n                                  <option selected value={item}>Get All</option>\n                                );\n                              } else {\n                                if (item == this.state.month) {\n                                  return (\n                                    <option selected value={item}>{item}</option>\n                                  );\n                                } else {\n                                  return (\n                                    <option value={item}>{item}</option>\n                                  );\n                                }\n                              }\n                            })\n                          }\n                        </CSelect>\n                      </div> : \"\"\n                    }\n\n                  </div>\n                </div>\n              </div>\n\n              {/* <CRow>\n                <CCol lg=\"5\" sm=\"5\" md=\"5\" xs=\"12\">\n                  <div style={styles.tags}>\n                    {\n                      role == 'SALES' ? \"\" :\n                        <div>\n                          <Input style={styles.searchInput} onChange={(e) => this.searchKey(e.target.value)} name=\"key\" value={key} placeholder=\"Search\" />\n                          <Button outline color=\"primary\" style={styles.floatRight} size=\"sm\" onClick={async e => await this.toggleModal(\"new\")}>Add</Button>\n                        </div>\n                    }\n                  </div>\n                </CCol>\n                <CCol lg=\"7\" sm=\"7\" md=\"7\" xs=\"12\">\n                  <div>Choose Month</div>\n                  <CSelect style={{ width: 300, float: 'left', backgroundColor: '#ffff99' }} onChange={async e => { await this.check(e) }} custom size=\"sm\" name=\"selectSm\" id=\"SelectLm\">\n                    {\n                      this.state.arrMonthWithDefault.map((item, i) => {\n                        if (item == \"00\") {\n                          return (\n                            <option selected value={item}>Get All</option>\n                          );\n                        } else {\n                          if (item == this.state.month) {\n                            return (\n                              <option selected value={item}>{item}</option>\n                            );\n                          } else {\n                            return (\n                              <option value={item}>{item}</option>\n                            );\n                          }\n                        }\n                      })\n                    }\n                  </CSelect>\n                </CCol>\n              </CRow> */}\n            </CardHeader>\n            <CardBody>\n              {\n                role == 'SALES' ?\n                  <table className=\"table table-hover table-outline mb-0  d-sm-table\">\n                    <thead className=\"thead-light\">\n                      <tr>\n                        <th className=\"text-center\">Name</th>\n                        <th className=\"text-center\">Email</th>\n                        <th className=\"text-center\">Phone</th>\n                        {\n                          isSale ? <th className=\"text-center\">Times</th> : \"\"\n                        }\n                        {\n                          isSale ? <th className=\"text-center\">Coeff</th> : \"\"\n                        }\n                        <th className=\"text-center\">Gender</th>\n                        <th className=\"text-center\">Date</th>\n                        <th className=\"text-center\">Action</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <td colSpan=\"10\" hidden={hidden} className=\"text-center\">Không tìm thấy dữ liệu</td>\n                      {\n                        data != undefined ?\n                          data.map((item, i) => {\n                            return (\n                              <tr key={i}>\n                                <td className=\"text-center\">{item.Name}</td>\n                                <td className=\"text-center\">{item.Email}</td>\n                                <td className=\"text-center\">{item.Phone}</td>\n                                {\n                                  isSale ? <th className=\"text-center\">{item.count}</th> : \"\"\n                                }\n                                {\n                                  isSale ? <th className=\"text-center\">{item.coefficient}</th> : \"\"\n                                }\n                                <td className=\"text-center\">{item.Gender}</td>\n                                <td className=\"text-center\">\n                                  {(new Date(item.Create_Date)).toLocaleDateString() + ' ' + (new Date(item.Create_Date)).toLocaleTimeString()}\n                                </td>\n                                <td className=\"text-center\">\n                                  {/* <Button style={styles.mgl5} outline color=\"primary\" size=\"sm\" onClick={async (e) => await this.openUpdate(item)} >Cập nhật</Button>{' '}\n                                <Button outline color=\"danger\" size=\"sm\" onClick={(e) => { this.openDelete(item) }}>Xoá</Button>{' '} */}\n                                  <Button outline color=\"primary\" size=\"sm\" onClick={async (e) => { await this.getSeeder() }}>Detail</Button>\n                                </td>\n                              </tr>\n                            );\n                          }) : \"\"\n                      }\n                    </tbody>\n                  </table> : role == 'ADMIN' ?\n\n                    <table className=\"table table-hover table-outline mb-0  d-sm-table\">\n                      <thead className=\"thead-light\">\n                        <tr>\n                          <th className=\"text-center\">Username</th>\n                          <th className=\"text-center\">Name</th>\n                          <th className=\"text-center\">Email</th>\n                          <th className=\"text-center\">Phone</th>\n                          <th className=\"text-center\">Gender</th>\n                          <th className=\"text-center\">Code</th>\n                          <th className=\"text-center\">Action</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {\n                          data != undefined ?\n                            data.map((item, i) => {\n                              return (\n                                <tr key={i}>\n                                  <td className=\"text-center\">{item.UserName}</td>\n                                  <td className=\"text-center\">{item.Name}</td>\n                                  <td className=\"text-center\">{item.Email}</td>\n                                  <td className=\"text-center\">{item.Phone}</td>\n                                  <td className=\"text-center\">{item.Gender}</td>\n                                  <td className=\"text-center\">{item.Code}</td>\n                                  <td className=\"text-center\">\n                                    <Button style={styles.mgl5} outline color=\"primary\" size=\"sm\" onClick={async (e) => await this.openUpdate(item)} >Cập nhật</Button>{' '}\n                                    <Button outline color=\"danger\" size=\"sm\" onClick={(e) => { this.openDelete(item) }}>Xoá</Button>{' '}\n                                  </td>\n                                </tr>\n                              );\n                            }) : \"\"\n                        }\n                      </tbody>\n                    </table> :\n\n                    <table className=\"table table-hover table-outline mb-0  d-sm-table\">\n                      <thead className=\"thead-light\">\n                        <tr>\n                          <th className=\"text-center\">Name</th>\n                          <th className=\"text-center\">Email</th>\n                          <th className=\"text-center\">Phone</th>\n                          <th className=\"text-center\">Gender</th>\n                          <th className=\"text-center\">Company Id</th>\n                          <th className=\"text-center\">Code</th>\n                          <th className=\"text-center\">Action</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {\n                          data != undefined ?\n                            data.map((item, i) => {\n                              return (\n                                <tr key={i}>\n                                  <td className=\"text-center\">{item.UserName}</td>\n                                  <td className=\"text-center\">{item.Name}</td>\n                                  <td className=\"text-center\">{item.Email}</td>\n                                  <td className=\"text-center\">{item.Phone}</td>\n                                  <td className=\"text-center\">{item.Gender}</td>\n                                  <td className=\"text-center\">{item.Code}</td>\n                                  <td className=\"text-center\">\n                                    <Button style={styles.mgl5} outline color=\"primary\" size=\"sm\" onClick={async (e) => await this.openUpdate(item)} >Cập nhật</Button>{' '}\n                                    <Button outline color=\"danger\" size=\"sm\" onClick={(e) => { this.openDelete(item) }}>Xoá</Button>{' '}\n                                    <Button outline color=\"primary\" size=\"sm\" onClick={async (e) => { await this.tableUserSale(item._id, item.Name); this.setState({ month: \"01\" }) }}>Detail</Button>\n                                  </td>\n                                </tr>\n                              );\n                            }) : \"\"\n                        }\n                      </tbody>\n                    </table>\n              }\n            </CardBody>\n          </Card>\n          {\n            arrPagination.length == 1 ? \"\" :\n              <div style={{ float: 'right', marginRight: '10px', padding: '10px' }}>\n                <tr style={styles.row}>\n                  {\n                    arrPagination.map((item, i) => {\n                      return (\n                        <td>\n                          <Button style={styles.pagination} color={i == indexPage ? 'primary' : 'danger'} onClick={e => { this.setState({ data: arrPagination[i], indexPage: i }) }}>{i + 1}</Button>\n                        </td>\n                      );\n                    })\n                  }\n                </tr>\n              </div>\n          }\n          <div hidden={this.state.see_detail}>\n            <Button color=\"primary\" style={{ margin: '10px', width: '300px' }} size=\"sm\" onClick={async e => { this.getData(); this.setState({ see_detail: !this.state.see_detail }) }}>\n              Go back\n            </Button>\n\n            {/* dawdaefakwdhlkawjdkl */}\n            <Card>\n              <CardHeader>\n                <i className=\"fa fa-align-justify\">LIST USER SALE OF SALER ( Sale Name: {this.state.nameSale}, Page: {this.state.indexPage + 1})</i>\n              </CardHeader>\n              <CardBody>\n                {\n                  <table className=\"table table-hover table-outline mb-0  d-sm-table\">\n                    <thead className=\"thead-light\">\n                      <tr>\n                        <th className=\"text-center\">Name</th>\n                        <th className=\"text-center\">Email</th>\n                        <th className=\"text-center\">Phone</th>\n                        <th className=\"text-center\">Gender</th>\n                        <th className=\"text-center\">Time Invite</th>\n                        <th className=\"text-center\">Coefficient</th>\n                        <th className=\"text-center\">Date</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <td colSpan=\"8\" hidden={hidden_all} className=\"text-center\">Không tìm thấy dữ liệu</td>\n                      {\n                        dataAll != undefined ?\n                          dataAll.map((item, i) => {\n                            return (\n                              <tr key={i}>\n                                <td className=\"text-center\">{item.Name}</td>\n                                <td className=\"text-center\">{item.Email}</td>\n                                <td className=\"text-center\">{item.Phone}</td>\n                                <td className=\"text-center\">{item.Gender}</td>\n                                <td className=\"text-center\">{item.count}</td>\n                                <td className=\"text-center\">{item.coefficient}</td>\n                                <td className=\"text-center\">\n                                  {(new Date(item.Create_Date)).toLocaleDateString() + ' ' + (new Date(item.Create_Date)).toLocaleTimeString()}\n                                </td>\n                              </tr>\n                            );\n                          }) : \"\"\n                      }\n                    </tbody>\n                  </table>\n                }\n              </CardBody>\n            </Card>\n            {\n              arrPagination_All.length == 1 ? \"\" :\n                <div style={{ float: 'right', marginRight: '10px', padding: '10px' }}>\n                  <tr style={styles.row}>\n                    {\n                      arrPagination_All.map((item, i) => {\n                        return (\n                          <td>\n                            <Button style={styles.pagination} color={i == indexPage_All ? 'primary' : 'danger'} onClick={e => { this.setState({ dataAll: arrPagination_All[i], indexPage_All: i }) }}>{i + 1}</Button>\n                          </td>\n                        );\n                      })\n                    }\n                  </tr>\n                </div>\n            }\n\n\n            <CCardGroup rows className=\"cols-2\">\n              <CCard backgroundColor=\"red\">\n                <CCardBody>\n                  <CChartBar\n                    datasets={[\n                      {\n                        label: 'Total user of month ',\n                        backgroundColor: '#f87979',\n                        data: this.state.arrAllUser\n                      }\n                    ]}\n                    labels=\"months\"\n                    options={{\n                      tooltips: {\n                        enabled: true\n                      }\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n              <CCard backgroundColor=\"red\">\n                <Card>\n                  <CardHeader>\n                    <div class=\"container\">\n                      <div class=\"row\">\n                        <div class=\"col\">\n                          <i className=\"justify-content-center\"></i>{this.state.nameSale} ( Page: {this.state.indexPage + 1}, Month: {this.state.month})\n                        </div>\n                        <div class=\"col\">\n                          <CSelect style={{ width: 300, float: 'right', backgroundColor: '#ffff99' }} onChange={async e => { await this.getUserSale_ByMonth(this.props.data.idSale, e.target.value); this.setState({ month: e.target.value }) }} custom size=\"sm\" name=\"selectSm\" id=\"SelectLm\">\n                            {\n                              this.state.arrMonth.map((item, i) => {\n                                if (item == this.state.month) {\n                                  return (\n                                    <option selected value={item}>{item}</option>\n                                  );\n                                } else {\n                                  return (\n                                    <option value={item}>{item}</option>\n                                  );\n                                }\n\n                              })\n                            }\n                          </CSelect>\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardBody>\n                    {\n                      <table className=\"table table-hover table-outline mb-0  d-sm-table\">\n                        <thead className=\"thead-light\">\n                          <tr>\n                            <th className=\"text-center\">Name</th>\n                            <th className=\"text-center\">Email</th>\n                            <th className=\"text-center\">Phone</th>\n                            <th className=\"text-center\">Gender</th>\n                            <th className=\"text-center\">Time Invite</th>\n                            <th className=\"text-center\">Coefficient</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <td colSpan=\"8\" hidden={hidden} className=\"text-center\">Không tìm thấy dữ liệu</td>\n                          {\n                            data != undefined ?\n                              data.map((item, i) => {\n                                return (\n                                  <tr key={i}>\n                                    <td className=\"text-center\">{item.Name}</td>\n                                    <td className=\"text-center\">{item.Email}</td>\n                                    <td className=\"text-center\">{item.Phone}</td>\n                                    <td className=\"text-center\">{item.Gender}</td>\n                                    <td className=\"text-center\">{item.count}</td>\n                                    <td className=\"text-center\">{item.coefficient}</td>\n                                  </tr>\n                                );\n                              }) : \"\"\n                          }\n                        </tbody>\n                      </table>\n                    }\n                  </CardBody>\n                </Card>\n                {\n                  arrPagination.length == 1 ? \"\" :\n                    <div style={{ float: 'right', marginRight: '10px', padding: '10px' }}>\n                      <tr style={styles.row}>\n                        {\n                          arrPagination.map((item, i) => {\n                            return (\n                              <td>\n                                <Button style={styles.pagination} color={i == indexPage ? 'primary' : 'danger'} onClick={e => { this.setState({ data: arrPagination[i], indexPage: i }) }}>{i + 1}</Button>\n                              </td>\n                            );\n                          })\n                        }\n                      </tr>\n                    </div>\n                }\n              </CCard>\n            </CCardGroup>\n\n          </div>\n\n          <Modal isOpen={this.state.modalCom} className={this.props.className}>\n            <ModalHeader>{this.state.action == 'new' ? `Tạo mới` : `Cập nhật`}</ModalHeader>\n            <ModalBody>\n              <TextFieldGroup\n                field=\"Email\"\n                label=\"Email\"\n                value={this.state.Email}\n                placeholder={\"Email\"}\n                type={'email'}\n                onChange={e => this.onChange(\"Email\", e.target.value)}\n              // rows=\"5\"\n              />\n              <TextFieldGroup\n                field=\"Address\"\n                label=\"Address\"\n                value={this.state.Address}\n                placeholder={\"Email\"}\n                type={'email'}\n                onChange={e => this.onChange(\"Address\", e.target.value)}\n              // rows=\"5\"\n              />\n              <TextFieldGroup\n                field=\"Name\"\n                label=\"Name\"\n                value={this.state.Name}\n                placeholder={\"Name\"}\n                // error={errors.title}\n                onChange={e => this.onChange(\"Name\", e.target.value)}\n              // rows=\"5\"\n              />\n\n              <TextFieldGroup\n                field=\"Password\"\n                label=\"Password\"\n                value={this.state.Password}\n                type={\"password\"}\n                placeholder={\"Password\"}\n                readOnly={action == 'new' ? false : true}\n                onChange={e => this.onChange(\"Password\", e.target.value)}\n              // rows=\"5\"\n              />\n\n              <TextFieldGroup\n                field=\"Code\"\n                label=\"Code\"\n                placeholder={\"Code\"}\n                value={this.state.Code}\n                // error={errors.title}\n                onChange={e => this.onChange(\"Code\", e.target.value)}\n              // rows=\"5\"\n              />\n\n              <TextFieldGroup\n                field=\"UserName\"\n                label=\"UserName\"\n                placeholder={\"Username\"}\n                value={this.state.UserName}\n                // error={errors.title}\n                onChange={e => this.onChange(\"UserName\", e.target.value)}\n              // rows=\"5\"\n              />\n\n              <TextFieldGroup\n                field=\"Phone\"\n                label=\"Phone\"\n                value={this.state.Phone}\n                placeholder={\"Phone\"}\n                // error={errors.title}\n                onChange={e => this.onChange(\"Phone\", e.target.value)}\n              // rows=\"5\"\n              />\n\n              <div>\n                <label style={styles.flexLabel} htmlFor=\"tag\">Gender:    </label>\n                <select style={styles.flexOption} name=\"Gender\" onChange={e => this.onChange(\"Gender\", e.target.value)}>\n                  <option value={this.state.Gender}>{this.state.Gender == '' ? ` - - - - - - - - - - ` : this.state.Gender}</option>\n                  <option value={'Nam'}>Nam</option>\n                  <option value={'Nữ'}>Nữ</option>\n                </select>\n              </div>\n\n              <div>\n                <label style={styles.flexLabel} htmlFor=\"tag\">Company:    </label>\n                <select style={styles.flexOption} name=\"Company_Id\" onChange={e => this.onChange(\"Company_Id\", e.target.value)}>\n                  <option value={this.state.Company_Id}>-----</option>\n                  {\n                    dataCompany.map((item, i) => {\n                      if (item.Name == currentCompany) {\n                        return (\n                          <option selected value={item._id}>{item.Name}</option>\n                        );\n                      } else {\n                        return (\n                          <option value={item._id}>{item.Name}</option>\n                        );\n                      }\n                    })\n                  }\n                </select>\n              </div>\n\n              <div>\n                <label style={styles.flexLabel} htmlFor=\"tag\">Role:    </label>\n                <select style={styles.flexOption} name=\"Role_Id\" onChange={e => this.onChange(\"Role_Id\", e.target.value)}>\n                  <option value={this.state.Role_Id}>-----</option>\n                  {\n                    dataRole.map((item, i) => {\n                      if (item.Name == currentRole) {\n                        return (\n                          <option selected value={item._id}>{item.Name}</option>\n                        );\n                      } else {\n                        return (\n                          <option value={item._id}>{item.Name}</option>\n                        );\n                      }\n                    })\n                  }\n                </select>\n              </div>\n\n              {/* <div>\n                <label style={styles.flexLabel} htmlFor=\"tag\">Sale:    </label>\n                <select style={styles.flexOption} name=\"Sale_Id\" onChange={e => this.onChange(\"Sale_Id\", e.target.value)}>\n                  <option value={this.state.Sale_Id}>-----</option>\n                  {\n                    dataSale.map((item, i) => {\n                      if (item.Name == currentSale) {\n                        return (\n                          <option selected value={item._id}>{item.Name}</option>\n                        );\n                      } else {\n                        return (\n                          <option value={item._id}>{item.Name}</option>\n                        );\n                      }\n                    })\n                  }\n                </select>\n              </div> */}\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"primary\" onClick={e => { this.state.action === 'new' ? this.addUser() : this.updateUser() }} disabled={this.state.isLoading}>Lưu</Button>{' '}\n              <Button color=\"secondary\" onClick={e => this.toggleModal(\"new\")}>Đóng</Button>\n            </ModalFooter>\n          </Modal>\n\n          <Modal isOpen={this.state.modalDelete} toggle={e => this.setState({ modalDelete: !this.state.modalDelete, delete: null })} className={this.props.className}>\n            <ModalHeader toggle={e => this.setState({ modalDelete: !this.state.modalDelete, delete: null })}>{`Xoá`}</ModalHeader>\n            <ModalBody>\n              <label htmlFor=\"tag\">{`Do you want to delete user \"${this.state.delete ? this.state.delete.Email : ''}\" ?`}</label>\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"primary\" onClick={e => this.delete()} disabled={this.state.isLoading}>Xoá</Button>{' '}\n              <Button color=\"secondary\" onClick={e => this.setState({ modalDelete: !this.state.modalDelete, delete: null })}>Đóng</Button>\n            </ModalFooter>\n          </Modal>\n        </div>\n      );\n    }\n    return (\n      <div className=\"d-flex justify-content-center\">\n        <ReactLoading type={\"balls\"} color={\"orange\"} height={'5%'} width={'5%'} />\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  wa10: {\n    width: \"5%\",\n    float: \"left\",\n    height: \"60px\"\n  },\n  sale_times: {\n    width: \"8%\",\n    float: \"left\",\n    height: \"60px\",\n    textAlign: 'center'\n  },\n  pagination: {\n    marginRight: '5px'\n  },\n  flexLabel: {\n    width: 100\n  },\n  flexOption: {\n    width: 300\n  },\n  a: {\n    textDecoration: 'none'\n  },\n  floatRight: {\n    float: \"right\",\n    marginTop: '3px'\n  },\n  spinner: {\n    width: \"30px\"\n  },\n  center: {\n    textAlign: \"center\"\n  },\n  tbody: {\n    height: \"380px\",\n    overflowY: \"auto\"\n  },\n  wh12: {\n    width: \"11%\",\n    float: \"left\",\n    height: \"60px\",\n    textAlign: 'center'\n  },\n  ws12: {\n    width: \"13%\",\n    float: \"left\",\n    height: \"60px\",\n    textAlign: 'center'\n  },\n  wh15: {\n    width: \"15%\",\n    float: \"left\",\n    height: \"60px\",\n    textAlign: 'center'\n  },\n  w5: {\n    width: \"22%\",\n    float: \"left\",\n    height: \"60px\"\n  },\n  w5_10: {\n    width: \"5%\",\n    float: \"left\",\n    height: \"60px\"\n  },\n  row: {\n    float: \"left\",\n    width: \"100%\"\n  },\n  success: {\n    color: 'green'\n  },\n  danger: {\n    color: 'red'\n  },\n  mgl5: {\n    marginLeft: '5px'\n  },\n  tags: {\n    float: \"right\",\n    marginRight: \"5px\",\n    width: \"250px\",\n    marginTop: '10px'\n  },\n  searchInput: {\n    width: \"190px\",\n    display: 'inline-block',\n  },\n  userActive: {\n    color: 'green'\n  },\n  userPending: {\n    color: 'red'\n  },\n  nagemonNameCol: {\n    width: '328px'\n  },\n  image: {\n    width: '100px',\n    height: '100px',\n    borderRadius: '99999px'\n  },\n}\n\nconst mapStateToProps = state => {\n  return {\n    data: state.getData_AllAPI\n  }\n}\n\n\nexport default connect(mapStateToProps, { onSaveID, onSaveSeed })(Users);\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst TextFieldGroup = ({ field, value, label, error, type, onChange, checkUserExists, readOnly, placeholder, onClick }) => {\n  return (\n    <div className={classnames('form-group', { 'has-error': error })}>\n      <label className=\"control-label\">{label}</label>\n      <input\n        onChange={onChange}\n        onClick={onClick}\n        onBlur={checkUserExists}\n        value={value}\n        type={type}\n        name={field}\n        placeholder={placeholder}\n        readOnly={readOnly}\n        className=\"form-control\"\n      />\n    {error && <span className=\"help-block\">{error}</span>}\n    </div>  );\n}\n\nTextFieldGroup.propTypes = {\n  field: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  error: PropTypes.string,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  checkUserExists: PropTypes.func\n}\n\nTextFieldGroup.defaultProps = {\n  type: 'text'\n}\n\nexport default TextFieldGroup;\n","import {\n  SAVE_ID_SALE,\n  SAVE_SEED\n} from '../actions.js'\n\nexport function onSaveID(id) {\n  return {\n    type: SAVE_ID_SALE,\n    payload: { id }\n  };\n}\n\nexport function onSaveSeed(seed) {\n  return {\n    type: SAVE_SEED,\n    payload: { seed }\n  };\n}\n"],"sourceRoot":""}